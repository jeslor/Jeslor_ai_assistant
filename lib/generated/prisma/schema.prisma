// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  username       String?
  email          String?     @unique
  profileImage   String?
  hashedPassword String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  interviews     Interview[] @relation("interview")
  feedbacks      Feedback[]  @relation("feedback")
}

model Interview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role      String
  level     String
  questions String[]
  techstack String[]
  company   String
  type      String
  finalized Boolean
  userId    String   @db.ObjectId
  user      User     @relation("interview", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role], name: "role_index")
  @@index([level], name: "level_index")
  @@index([type], name: "type_index")
  @@index([finalized], name: "finalized_index")
  @@map("interviews")
}

model Feedback {
  id                  String                  @id @default(auto()) @map("_id") @db.ObjectId
  userId              String                  @db.ObjectId
  interviewId         String                  @db.ObjectId
  totalScore          Float
  strengths           String[]
  areasForImprovement String[]
  finalAssessment     String
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  user                User                    @relation("feedback", fields: [userId], references: [id], onDelete: Cascade)
  categoryScores      CategoryScoreEmbedded[]

  @@map("feedbacks")
}

type CategoryScoreEmbedded {
  name    String
  score   Float
  comment String
}
